import { Module } from '@nestjs/common';  
// Importa el decorador @Module de NestJS para definir un m√≥dulo

import { ConfigModule } from '@nestjs/config';  
// Permite cargar variables de entorno desde un archivo .env

import { TypeOrmModule } from '@nestjs/typeorm';  
// Permite integrar TypeORM (ORM para bases de datos) con NestJS

import { AppController } from './app.controller';  
// Importa el controlador principal de la aplicaci√≥n

import { AppService } from './app.service';  
// Importa el servicio principal de la aplicaci√≥n

import { UserModule } from './user/user.module';  
// Importa el m√≥dulo de usuarios (contiene entidad, servicio y controlador de usuarios)

// -------------------- REDIS --------------------
import { RedisModule } from './redis/redis.module';  
// Importamos RedisModule en lugar de RedisProvider/RedisService directamente.
// Esto hace que Redis quede encapsulado y reutilizable.
// ------------------------------------------------

@Module({
  imports: [
    ConfigModule.forRoot(),  
    // Inicializa ConfigModule para que todas las variables de .env est√©n disponibles en process.env

    // -------------------- POSTGRESQL --------------------
    TypeOrmModule.forRoot({
      type: 'postgres',  
      // Tipo de base de datos: PostgreSQL

      host: process.env.DB_HOST,  
      // Host de la base de datos (desde .env)

      port: Number(process.env.DB_PORT),  
      // Puerto de la base de datos (convertido a n√∫mero)

      username: process.env.DB_USERNAME,  
      // Usuario para conectarse a la base de datos

      password: process.env.DB_PASSWORD,  
      // Contrase√±a para conectarse a la base de datos

      database: process.env.DB_NAME,  
      // Nombre de la base de datos

      autoLoadEntities: true,  
      // Carga autom√°ticamente todas las entidades registradas en los m√≥dulos

      synchronize: true,  
      // Sincroniza autom√°ticamente las tablas de la base de datos con tus entidades
    }),
    // ------------------------------------------------------

    UserModule, 
    // M√≥dulo que encapsula todo lo relacionado a usuarios (entidad, servicio, controlador)

    RedisModule, 
    // üöÄ Importante: al importar RedisModule, toda la aplicaci√≥n ya puede
    // usar RedisService sin tener que registrar RedisProvider/RedisService manualmente.
    // Esto mantiene el c√≥digo m√°s limpio, organizado y modular.
  ],
  controllers: [AppController],  
  // Registra los controladores de este m√≥dulo

  providers: [
    AppService,  
    // Servicio principal de la aplicaci√≥n
    // ‚ùå Ya no es necesario poner aqu√≠ RedisProvider o RedisService
    // porque eso ya est√° incluido en RedisModule
  ],
})
export class AppModule {}  
// Define el m√≥dulo principal de la aplicaci√≥n
// üëâ Su importancia: es el "punto de entrada" de todos los dem√°s m√≥dulos.
// Ahora incluye PostgreSQL (base de datos relacional) y Redis (cache/almacenamiento r√°pido).
