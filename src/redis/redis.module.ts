// -------------------------------------------------------------
// üìå REDIS MODULE (redis.module.ts)
// -------------------------------------------------------------
// Este archivo define el m√≥dulo de Redis dentro de la aplicaci√≥n NestJS.
// Se llama "redis.module.ts" porque su funci√≥n es encapsular todo lo
// relacionado con Redis (conexi√≥n y operaciones) en un solo lugar.
//
// üîπ ¬øPor qu√© es importante?
// - Mantiene el c√≥digo organizado y modular.
// - Permite que otras partes de la aplicaci√≥n usen Redis sin duplicar l√≥gica.
// - Hace que Redis sea f√°cilmente reutilizable y mantenible.
//
// üîπ Prop√≥sito:
// - Proveer la conexi√≥n con Redis (via RedisProvider).
// - Exponer un servicio (RedisService) con m√©todos listos para usar (set/get).
// - Hacer que cualquier m√≥dulo que importe RedisModule pueda usar Redis.
// -------------------------------------------------------------

import { Module } from '@nestjs/common';  
// @Module: Decorador que marca esta clase como un m√≥dulo de NestJS

import { RedisProvider } from './redis.provider';  
// Provider que se encarga de crear y configurar la conexi√≥n con Redis

import { RedisService } from './redis.service';  
// Servicio que encapsula las operaciones con Redis (ej: set y get)

@Module({
  providers: [RedisProvider, RedisService],  
  // "providers" ‚Üí Registramos las piezas internas de este m√≥dulo
  // RedisProvider: conexi√≥n a Redis
  // RedisService: l√≥gica para usar Redis de forma sencilla

  exports: [RedisService],  
  // "exports" ‚Üí Especifica qu√© compartimos con otros m√≥dulos.
  // Exportamos RedisService para que cualquier m√≥dulo que importe
  // RedisModule pueda usarlo sin preocuparse por la conexi√≥n interna.
})
export class RedisModule {}  
// Esta clase define el m√≥dulo de Redis en s√≠ mismo.
// üîπ Es importante porque:
//   - Le da identidad al m√≥dulo (sin esta clase, NestJS no lo reconoce).
//   - Permite importar RedisModule en AppModule u otros m√≥dulos.
//   - Centraliza la configuraci√≥n y hace que Redis sea un bloque independiente,
//     reutilizable y f√°cil de mantener dentro de la arquitectura de NestJS.











// Sin RedisModule

// Tienes que importar manualmente RedisProvider y RedisService en AppModule.

// Si ma√±ana quieres usar Redis en otro m√≥dulo (ej: AuthModule), tendr√≠as que volver a registrarlos ah√≠ tambi√©n.

// Esto genera duplicaci√≥n y riesgo de errores.

// üîπ Con RedisModule

// Solo defines la configuraci√≥n de Redis una sola vez dentro de RedisModule.

// Como el m√≥dulo exporta RedisService, cualquier otro m√≥dulo que necesite Redis solo tiene que importar RedisModule.

// NestJS maneja las inyecciones de dependencias de manera centralizada y optimizada.

// ‚ö° Beneficios de eficiencia

// Menos duplicaci√≥n de c√≥digo ‚Üí m√°s f√°cil de mantener.

// Menos riesgo de errores ‚Üí si hay que cambiar c√≥mo te conectas a Redis, solo lo haces en un lugar.

// Carga modular ‚Üí NestJS inicializa RedisModule una sola vez, y luego comparte la misma instancia de RedisService en toda la app (no abre conexiones innecesarias).

// Escalabilidad ‚Üí si el proyecto crece y agregas m√°s m√≥dulos, Redis seguir√° funcionando sin necesidad de reconfigurar nada.