import { Module, Global } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { RedisService } from './redis.service';

// @Global hace que RedisService est√© disponible en toda la app sin necesidad
// de importar RedisModule en cada m√≥dulo que lo use
@Global()
@Module({
  imports: [ConfigModule],           // Para poder usar variables de entorno desde .env
  providers: [RedisService],         // Provee el servicio RedisService
  exports: [RedisService],           // Lo exporta para que otros m√≥dulos puedan usarlo
})
export class RedisModule {}          // ‚úÖ Aseg√∫rate de exportar la clase


// -------------------- EXPLICACI√ìN DE CAMBIOS --------------------
// Antes hab√≠a RedisProvider, m√∫ltiples imports y l√≥gica repetida para crear la conexi√≥n.
// Cada m√≥dulo que quer√≠a usar Redis ten√≠a que registrarlo manualmente.
// Esto generaba mucho c√≥digo, duplicaci√≥n y errores de configuraci√≥n (por ejemplo, ECONNREFUSED).

// Ahora, con RedisModule global:
// 1. Solo necesitamos RedisService, que centraliza toda la conexi√≥n y m√©todos de Redis.
// 2. @Global permite que RedisService est√© disponible en cualquier m√≥dulo autom√°ticamente.
// 3. Eliminamos RedisProvider y configuraciones duplicadas.
// 4. El c√≥digo es mucho m√°s limpio, modular y f√°cil de mantener.

// -------------------- POSIBLES DESVENTAJAS --------------------
// 1. Al ser @Global, cualquier m√≥dulo puede acceder a RedisService sin control expl√≠cito, 
//    lo que podr√≠a dificultar pruebas unitarias aisladas si no se usa mocking adecuado.
// 2. Si en el futuro se quisiera usar m√∫ltiples instancias de Redis para diferentes m√≥dulos, 
//    la configuraci√≥n global podr√≠a limitar la flexibilidad.
// 3. Los errores en RedisService afectan potencialmente a toda la aplicaci√≥n 
//    porque todos los m√≥dulos dependen de la misma instancia.





















// import { Module } from '@nestjs/common';
// // @Module: Decorador de NestJS que define un m√≥dulo

// import { ConfigModule } from '@nestjs/config';
// // Permite usar variables de entorno desde un archivo .env

// import { TypeOrmModule } from '@nestjs/typeorm';
// // Permite integrar TypeORM (ORM para bases de datos) con NestJS

// import { AppController } from './app.controller';
// // Controlador principal de la app

// import { AppService } from './app.service';
// // Servicio principal de la app

// import { UserModule } from './user/user.module';
// // M√≥dulo de usuarios (entidad, servicio y controlador)

// // -------------------- REDIS --------------------
// import { RedisModule } from './redis/redis.module';
// // Importamos RedisModule actualizado, que ahora crea la conexi√≥n usando .env
// // y expone RedisService a toda la aplicaci√≥n
// // ------------------------------------------------

// @Module({
//   imports: [
//     ConfigModule.forRoot(),
//     // Inicializa ConfigModule para que las variables de .env est√©n disponibles en process.env

//     // -------------------- POSTGRESQL --------------------
//     TypeOrmModule.forRoot({
//       type: 'postgres',
//       host: process.env.DB_HOST,
//       port: Number(process.env.DB_PORT),
//       username: process.env.DB_USERNAME,
//       password: process.env.DB_PASSWORD,
//       database: process.env.DB_NAME,
//       autoLoadEntities: true,
//       synchronize: true,
//     }),
//     // ---------------------------------------------------

//     UserModule,
//     // M√≥dulo de usuarios

//     RedisModule,
//     // üöÄ RedisModule actualizado:
//     // Ahora crea la instancia de Redis autom√°ticamente usando REDIS_HOST y REDIS_PORT del .env
//     // y la comparte con toda la app sin necesidad de importar RedisModule en cada m√≥dulo.
//   ],
//   controllers: [AppController],
//   providers: [AppService],
//   // ‚ùå Ya no necesitamos registrar RedisProvider/RedisService manualmente
// })
// export class AppModule {}

// // -------------------- CAMBIOS REALIZADOS --------------------
// // 1. RedisModule ahora se importa como m√≥dulo global (@Global) y exporta RedisService.
// // 2. RedisModule crea la instancia de Redis din√°micamente usando .env.
// // 3. Se elimin√≥ RedisProvider externo; toda la configuraci√≥n se centraliza en RedisModule.
// // 4. Ahora cualquier m√≥dulo puede inyectar RedisService sin necesidad de importar RedisModule.
// // 5. Esto evita errores ECONNREFUSED al intentar conectarse a Redis porque la configuraci√≥n ya es correcta.

// // Esta clase define el m√≥dulo de Redis en s√≠ mismo.
// // üîπ Es importante porque:
// //   - Le da identidad al m√≥dulo (sin esta clase, NestJS no lo reconoce).
// //   - Permite importar RedisModule en AppModule u otros m√≥dulos.
// //   - Centraliza la configuraci√≥n y hace que Redis sea un bloque independiente,
// //     reutilizable y f√°cil de mantener dentro de la arquitectura de NestJS.











// // Sin RedisModule

// // Tienes que importar manualmente RedisProvider y RedisService en AppModule.

// // Si ma√±ana quieres usar Redis en otro m√≥dulo (ej: AuthModule), tendr√≠as que volver a registrarlos ah√≠ tambi√©n.

// // Esto genera duplicaci√≥n y riesgo de errores.

// // üîπ Con RedisModule

// // Solo defines la configuraci√≥n de Redis una sola vez dentro de RedisModule.

// // Como el m√≥dulo exporta RedisService, cualquier otro m√≥dulo que necesite Redis solo tiene que importar RedisModule.

// // NestJS maneja las inyecciones de dependencias de manera centralizada y optimizada.

// // ‚ö° Beneficios de eficiencia

// // Menos duplicaci√≥n de c√≥digo ‚Üí m√°s f√°cil de mantener.

// // Menos riesgo de errores ‚Üí si hay que cambiar c√≥mo te conectas a Redis, solo lo haces en un lugar.

// // Carga modular ‚Üí NestJS inicializa RedisModule una sola vez, y luego comparte la misma instancia de RedisService en toda la app (no abre conexiones innecesarias).

// // Escalabilidad ‚Üí si el proyecto crece y agregas m√°s m√≥dulos, Redis seguir√° funcionando sin necesidad de reconfigurar nada.